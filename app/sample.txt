package com.sundram.tasktwo.ui.activity;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.databinding.DataBindingUtil;
import androidx.lifecycle.ViewModelProvider;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.database.sqlite.SQLiteException;
import android.os.Bundle;
import android.text.InputType;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.inputmethod.EditorInfo;
import android.widget.SearchView;
import android.widget.Toast;

import com.google.android.material.bottomsheet.BottomSheetDialog;
import com.sundram.tasktwo.R;
import com.sundram.tasktwo.adapters.UserAdapter;
import com.sundram.tasktwo.databinding.ActivityMainBinding;
import com.sundram.tasktwo.databinding.FilterBottomSheetBinding;
import com.sundram.tasktwo.model.Response;
import com.sundram.tasktwo.model.UserDataModel;
import com.sundram.tasktwo.model.UserRoomDBModel;
import com.sundram.tasktwo.utils.ConnectionUtils;
import com.sundram.tasktwo.utils.ConstantUtils;
import com.sundram.tasktwo.utils.SharedPrefUtils;
import com.sundram.tasktwo.viewmodel.UserViewModel;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.inject.Inject;

import dagger.hilt.android.AndroidEntryPoint;

@AndroidEntryPoint
public class MainActivity extends AppCompatActivity {

    private ActivityMainBinding binding;
    private UserViewModel viewModel;
    private static final String TAG = "MAIN_ACTIVITY";
    private SearchView searchView;
    private List<UserDataModel> data;
    List<UserDataModel> dataModelList = new ArrayList<>();
    private Integer TOTAL_PAGE_NO;
    private Integer PAGE_NO = 1;
    private boolean isScroll = false;
    private boolean isFilterCalled = false;
    @Inject
    UserAdapter userAdapter;
    LinearLayoutManager linearLayoutManager;
    int scroll_pos = 0;
    int isMaleSelected = 0;
    int isFeMaleSelected = 0;
    boolean isGenderSelected = false;
    boolean isDataFetchFromLocal = false;
    @Inject
    SharedPrefUtils sharedPrefUtils;
    BottomSheetDialog bottomSheetDialog;
    FilterBottomSheetBinding filterBottomSheetBinding;
    Response responseModel;
    Iterator iterator;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        try {
            binding = DataBindingUtil.setContentView(this, R.layout.activity_main);
            sharedPrefUtils.init(MainActivity.this);
            viewModel = new ViewModelProvider(this).get(UserViewModel.class);
            //this is for sending context to view model
            viewModel.init(MainActivity.this);
            binding.swipeRefresh.setOnRefreshListener(() -> {
                PAGE_NO=0;
                getUserResponseData(1);
                isFilterCalled = false;
                isDataFetchFromLocal=false;
                binding.swipeRefresh.setRefreshing(false);
            });
            getUserResponseData(1);
            applyPaginationOnRecyclerView();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void getUserResponseData(Integer page_no) {
        try {
            Log.i(TAG, "getUserResponseData: "+page_no);
            if (ConnectionUtils.checkConnectivity(this)) {
                viewModel.getUserData(this, page_no).observe(this, this::handleResponse);
            } else {
                viewModel.getUserDataFromRoomDB(1).observe(this, this::handleLocalResponse);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void handleLocalResponse(UserRoomDBModel userRoomDBModel) {
        try {
            TOTAL_PAGE_NO = userRoomDBModel.getResponse().getMeta().getPagination().getPages();
            if (userRoomDBModel.getResponse().getData().size() > 0) {
                isDataFetchFromLocal = true;
                data = new ArrayList<>(userRoomDBModel.getResponse().getData());
                setRecyclerViewAndAdapter(userRoomDBModel.getResponse().getData());
            }
            return;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void handleResponse(Response response) {
        isDataFetchFromLocal = false;
        TOTAL_PAGE_NO = response.getMeta().getPagination().getPages();
        PAGE_NO=response.getMeta().getPagination().getPage();
        PAGE_NO++;
        responseModel = response;
        List<UserDataModel> userDataModelList = new ArrayList<>(response.getData());
        if (userDataModelList.size() > 0) {
            data = new ArrayList<>(userDataModelList);
            setRecyclerViewAndAdapter(userDataModelList);
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.option_menu, menu);
        // Associate searchable configuration with the SearchView
        searchView = (SearchView) menu.findItem(R.id.search).getActionView();
        searchView.setInputType(InputType.TYPE_CLASS_TEXT);
        searchView.setIconified(false);
        searchView.setQueryHint("Enter User Name..");
        searchView.setImeOptions(EditorInfo.IME_ACTION_DONE);
        menu.findItem(R.id.search).setOnActionExpandListener(new MenuItem.OnActionExpandListener() {
            @Override
            public boolean onMenuItemActionExpand(MenuItem menuItem) {
                return true;
            }

            @Override
            public boolean onMenuItemActionCollapse(MenuItem menuItem) {
                isFilterCalled = false;
//                getUserResponseData(PAGE_NO);
                return true;
            }
        });
        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
            @Override
            public boolean onQueryTextSubmit(String s) {
                return false;
            }

            @Override
            public boolean onQueryTextChange(String s) {
                filter(s);
                return false;
            }
        });
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
        if (item.getItemId() == R.id.filter) {
            showBottomSheetDialog();
        }
        if (item.getItemId() == R.id.refresh) {
            OnRefresh();
        }
        return super.onOptionsItemSelected(item);
    }

    private void OnRefresh() {
        isFilterCalled = false;
        isDataFetchFromLocal=false;
        PAGE_NO=0;
        binding.swipeRefresh.setEnabled(true);
        getUserResponseData(1);
    }

    private void showBottomSheetDialog() {
        try {
            bottomSheetDialog = new BottomSheetDialog(this);
            filterBottomSheetBinding = DataBindingUtil.inflate(LayoutInflater.from(MainActivity.this), R.layout.filter_bottom_sheet, null, false);
            bottomSheetDialog.setContentView(filterBottomSheetBinding.getRoot());
            bottomSheetDialog.show();
            if (isFeMaleSelected == 1) {
                filterBottomSheetBinding.radioFemaleBtn.setChecked(true);
            }
            if (isMaleSelected == 1) {
                isGenderSelected = false;
                filterBottomSheetBinding.radioMaleBtn.setChecked(true);
            }

            filterBottomSheetBinding.clearFilterTv.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    filterBottomSheetBinding.radioFemaleBtn.setChecked(false);
                    filterBottomSheetBinding.radioMaleBtn.setChecked(false);
                    isFeMaleSelected = 0;
                    isMaleSelected = 0;
                    isFilterCalled = false;
                    getUserResponseData(PAGE_NO);
                }
            });
            filterBottomSheetBinding.radioGroupGender.setOnCheckedChangeListener((radioGroup, i) -> {
                if (radioGroup.getCheckedRadioButtonId() == R.id.radio_female_btn) {
                    filter(getResources().getString(R.string.female));
                    isFeMaleSelected = 1;
                    isMaleSelected = 0;
                    sharedPrefUtils.saveSelectedGender(getResources().getString(R.string.female));
                } else {
                    isMaleSelected = 1;
                    isFeMaleSelected = 0;
                    filterBottomSheetBinding.radioMaleBtn.setChecked(true);
                    filter(getResources().getString(R.string.male));
                    sharedPrefUtils.saveSelectedGender(getResources().getString(R.string.male));
                }
                bottomSheetDialog.dismiss();
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void filter(String keyword) {
        isFilterCalled = true;
        binding.swipeRefresh.setEnabled(false);
        if (ConnectionUtils.checkConnectivity(MainActivity.this)) {
            dataModelList.clear();
            if (keyword == null || keyword.length() == 0) {
                dataModelList.addAll(data);
                return;
            }
            for (UserDataModel dataModel : data) {
                if (dataModel.getName().toLowerCase().contains(keyword.toLowerCase()) || dataModel.getGender().equals(keyword.toLowerCase()) == true) {
                    dataModelList.add(dataModel);
                }
            }
            setRecyclerViewAndAdapter(dataModelList);
        } else {
            Toast.makeText(MainActivity.this, ConstantUtils.CONNECTION_ERROR, Toast.LENGTH_SHORT).show();
        }

    }

    private void setRecyclerViewAndAdapter(List<UserDataModel> userDataModelList) {
       try {
           Log.i(TAG, "setRecyclerViewAndAdapter: ");
           binding.userRv.setHasFixedSize(true);
           linearLayoutManager = new LinearLayoutManager(MainActivity.this);
           binding.userRv.setLayoutManager(linearLayoutManager);
           if (isScroll) {
               iterator = userDataModelList.iterator();
               while (iterator.hasNext()){
                   userAdapter.userDataModelList.add((UserDataModel) iterator.next());
               }
               userAdapter.setData(userAdapter.userDataModelList, MainActivity.this);

               binding.userRv.scrollToPosition(scroll_pos + 1);
           } else {
               userAdapter.setData(userDataModelList, MainActivity.this);
           }
           insertUserDataIntoRoomDB();
           binding.userRv.setAdapter(userAdapter);
           userAdapter.notifyDataSetChanged();
       }catch (Exception e){
           e.printStackTrace();
       }
    }

    private void applyPaginationOnRecyclerView() {
        binding.userRv.addOnScrollListener(new RecyclerView.OnScrollListener() {
            @Override
            public void onScrollStateChanged(@NonNull RecyclerView recyclerView, int newState) {
                if (!recyclerView.canScrollVertically(1)) {
                    if (isFilterCalled == false || isDataFetchFromLocal==false) {
                        if (PAGE_NO <= TOTAL_PAGE_NO) {
                            isScroll = true;
                            Log.i(TAG, "onScrollStateChanged: ");
                            scroll_pos = linearLayoutManager.findFirstCompletelyVisibleItemPosition();
                            getUserResponseData(PAGE_NO);
                        } else {
                            isScroll = false;
                            Toast.makeText(MainActivity.this, "No More Data Available..", Toast.LENGTH_SHORT).show();
                        }
                    }
                } else {
                    isScroll = false;
                }
                return;
            }

            @Override
            public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {
                return;
            }
        });
        return;
    }

    private void insertUserDataIntoRoomDB() {
        Response response = new Response();
        response.setData(userAdapter.userDataModelList);
        response.setCode(responseModel.getCode());
        response.setMeta(responseModel.getMeta());

        Toast.makeText(MainActivity.this, "DATA INSERTED", Toast.LENGTH_SHORT).show();
        //insert data into room db
        viewModel.insertUserDataIntoRoomDB(new UserRoomDBModel(1, response));
    }
}